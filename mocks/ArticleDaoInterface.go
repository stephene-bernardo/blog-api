// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"blog-api/src"
	"github.com/stretchr/testify/mock"
)

// ArticleDaoInterface is an autogenerated mock type for the ArticleDaoInterface type
type ArticleDaoInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ArticleDaoInterface) Delete(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *ArticleDaoInterface) FindAll() ([]src.ArticleObject, error) {
	ret := _m.Called()

	var r0 []src.ArticleObject
	if rf, ok := ret.Get(0).(func() []src.ArticleObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]src.ArticleObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *ArticleDaoInterface) FindById(id int) (src.ArticleObject, error) {
	ret := _m.Called(id)

	var r0 src.ArticleObject
	if rf, ok := ret.Get(0).(func(int) src.ArticleObject); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(src.ArticleObject)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: title, content, author
func (_m *ArticleDaoInterface) Insert(title string, content string, author string) (int, error) {
	ret := _m.Called(title, content, author)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, string) int); ok {
		r0 = rf(title, content, author)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(title, content, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
